#!/Users/Stephen/thesis/shiny_app/venv/bin/python3

from pathlib import Path

import pandas as pd
import geopandas as gp
import matplotlib.pyplot as plt

from functools import partial


from shiny import reactive, App
from shiny.ui import page_navbar
from shiny.express import input, render, ui
from shinywidgets import output_widget, render_widget


all_maps = gp.read_file("data/congressional_maps_merged.shp")
all_maps = all_maps.set_index(["Step", "District"])

congress_results_df = pd.read_csv("data/simple_MO_Congress.csv").set_index("Step")


@reactive.calc
def maps_to_look_at():
    if input.map_category() == "500steps":
        periodic = [
            x for x in all_maps.index.get_level_values(0).unique() if x % 500 == 0
        ]
        maps = all_maps[all_maps.index.isin(periodic, level=0)]
    elif input.map_category() == "20steps":
        maps = all_maps[all_maps.index.isin(list(range(20)), level=0)]
    elif input.map_category() == "very_democrat":
        maps = all_maps[all_maps["reason"] == "Very Democratic"]
    elif input.map_category() == "very_republican":
        maps = all_maps[all_maps["reason"] == "Very Republican"]
    elif input.map_category() == "very_compact":
        maps = all_maps[all_maps["reason"] == "Very Compact"]
    else:
        maps = all_maps
    return maps


@reactive.calc
def steps_in_maps_to_look_at():
    return list(maps_to_look_at().index.get_level_values(0).unique())


@reactive.calc
def number_of_maps():
    return len(steps_in_maps_to_look_at())


@reactive.calc
def step_number():
    return steps_in_maps_to_look_at()[input.map_number_index() - 1]


@reactive.calc
def this_map_geo():
    return all_maps.xs(step_number(), level="Step", drop_level=True)


@reactive.calc
def this_map_info():
    return congress_results_df.loc[step_number(), :]


@reactive.effect
def _():
    ui.update_slider("map_number_index", value=0, min=1, max=number_of_maps())


ui.page_opts(title="Redistricting Missouri", page_fn=partial(page_navbar, id="page"))

with ui.nav_panel("Introduction"):
    ui.markdown(
        """
        # Redistricting Missouri
        Missouri is to be divided into eight Congressional Districts of equal population size.
        This tool is to demonstrate a small collection of the innumerable number of possible maps, and that it is easy to choose a nice looking map that is biased to one political party or the other.
        ## Gerrychain
        Maps are generated using the Gerrychain algorithm, which generate a new map by taking a previously generated map and changing the boundary between two adjacent districts.

        """
    )

with ui.nav_panel("Maps"):
    # with ui.sidebar():
    with ui.layout_columns(col_widths=(3, 7, 2)):
        with ui.card():
            ui.input_select(
                "map_category",
                "Select a map category:",
                {
                    "500steps": "Example Maps",
                    "20steps": "Gerrychain Sequence",
                    "very_republican": "Maps with 7 Republican Districts",
                    "very_democrat": "Maps with 4 Democratic Districs",
                    "very_compact": "Compact Maps",
                    "all_maps": "All of the Above",
                },
            )

            ui.input_slider("map_number_index", "Map Number", 1, 20, 0)

            @render.text
            def map_description():
                match input.map_category():
                    case "500steps":
                        x = "Regularly sampled maps from the 10000 maps drawn"
                    case "20steps":
                        x = "The sequence of maps generated from the 2022 Congressional District Maps. Notice how each step is generated by taking two adjacent districts and dividing them in different way."
                    case "very_republican":
                        x = "All observed maps which feature 7 Republican Districts and 1 Democratic Distric"
                    case "very_democratic":
                        x = "All observed maps which feature 4 Republican Districts and 4 Democratic Distric"
                    case _:
                        x = "Maps from any of the potential categories"
                return x

        # with ui.layout_columns(col_widths=(8, 4)):

        with ui.card():
            ui.card_header("Potential Map")

            @render.plot
            def plot():
                this_map = this_map_geo()
                fig, ax = plt.subplots(1, 1)

                if step_number() == 0:
                    map_name = "2022 Congressional Map"
                else:
                    map_name = f"Step #{step_number()}"

                this_map.plot(
                    column="D Vote Per",
                    ax=ax,
                    edgecolor="black",
                    cmap="bwr_r",
                    vmin=0,
                    vmax=100,
                    legend=True,
                    legend_kwds={
                        "orientation": "horizontal",
                        "pad": 0.01,
                        "label": "Democratic Vote Percentage",
                    },
                )
                ax.set_axis_off()
                ax.set_title(map_name)

                return fig

            # @render_widget
            # def plot():
            #     this_map = this_map_geo()
            #     this_map.to_crs(pyproj.CRS.from_epsg(4326), inplace=True)

            #     fig = px.choropleth(this_map,
            #                         geojson=this_map.geometry,
            #                         locations=this_map.index,
            #                         color="D Vote Per",
            #                         # edgecolor='black',
            #                         color_continuous_scale='RdBu',
            #                         range_color=(0,100)
            #                         # vmin=0, vmax=100
            #                         )
            #     fig.update_geos(fitbounds="locations", visible=False)

            #     return fig

        with ui.layout_column_wrap():

            with ui.value_box():
                "Seats Won"

                @render.text
                def d_v_r():
                    return f"{this_map_info()['state_wide_D_counts']} to {this_map_info()['state_wide_R_counts']}"

                "Democrats to Republicans"

            with ui.value_box():
                "Polsby-Popper Score"

                @render.text
                def polsby_score():
                    x = this_map_info()["polsby_popper"]
                    return f"{abs(x):.1f}"

                @render.text
                def polsby_info():
                    x = this_map_info()["pp_rank"]
                    return f"More compact than {x:.0f}% of maps."

            with ui.value_box():
                "Efficiency Gap"

                @render.text
                def efficiency_score():
                    x = this_map_info()["state_wide_efficiency_gap"] * 100
                    return f"{abs(x):.0f}%"

                @render.text
                def efficiency_desc():
                    x = this_map_info()["state_wide_efficiency_gap"] * 100
                    if x < 0:
                        y = "of Democrat votes are wasted"
                    else:
                        y = "of Republican votes are wasted"
                    return y
